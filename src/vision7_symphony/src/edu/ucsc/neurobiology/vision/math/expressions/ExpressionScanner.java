/* The following code was generated by JFlex 1.4.1 on 6/2/06 4:33 PM */

// JFlex specification for a simple expression scanner.
// @author Dumitru Petrusca, University of California, Santa Cruz.

package edu.ucsc.neurobiology.vision.math.expressions;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/2/06 4:33 PM from the specification file
 * <tt>MathExpressions.flex</tt>
 */
class ExpressionScanner
    implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int STRING = 1;
    public static final int YYINITIAL = 0;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
        "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\56" +
        "\1\61\1\52\1\4\1\51\1\57\1\62\1\40\1\41\1\46\1\45" +
        "\1\44\1\12\1\10\1\47\1\34\1\33\10\7\2\0\1\53\1\54" +
        "\1\55\2\0\4\4\1\11\10\4\1\37\14\4\1\42\1\6\1\43" +
        "\1\50\1\4\1\0\1\20\1\31\1\26\1\36\1\16\1\17\1\32" +
        "\1\4\1\24\2\4\1\21\1\35\1\25\1\27\1\23\1\4\1\14" +
        "\1\22\1\13\1\15\2\4\1\30\2\4\1\0\1\60\2\0\41\5" +
        "\2\0\4\4\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4" +
        "\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4" +
        "\16\0\5\4\11\0\1\4\21\0\130\5\5\0\23\5\12\0\1\4" +
        "\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4" +
        "\1\0\46\4\1\0\5\4\4\0\202\4\1\0\4\5\3\0\105\4" +
        "\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4" +
        "\7\0\47\4\11\0\21\5\1\0\27\5\1\0\3\5\1\0\1\5" +
        "\1\0\2\5\1\0\1\5\13\0\33\4\5\0\3\4\15\0\4\5" +
        "\14\0\6\5\13\0\32\4\5\0\13\4\16\5\7\0\12\5\4\0" +
        "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5" +
        "\1\0\4\5\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4" +
        "\1\5\36\4\33\5\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0" +
        "\3\5\66\4\2\0\1\5\1\4\20\5\2\0\1\4\4\5\3\0" +
        "\12\4\2\5\2\0\12\5\21\0\3\5\1\0\10\4\2\0\2\4" +
        "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5" +
        "\1\4\7\5\2\0\2\5\2\0\3\5\11\0\1\5\4\0\2\4" +
        "\1\0\3\4\2\5\2\0\12\5\4\4\15\0\3\5\1\0\6\4" +
        "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4" +
        "\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5" +
        "\13\0\4\4\1\0\1\4\7\0\14\5\3\4\14\0\3\5\1\0" +
        "\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0" +
        "\5\4\2\0\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0" +
        "\1\4\17\0\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5" +
        "\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4" +
        "\1\0\5\4\2\0\1\5\1\4\6\5\3\0\2\5\2\0\3\5" +
        "\10\0\2\5\4\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4" +
        "\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0" +
        "\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0" +
        "\10\4\1\0\3\4\4\0\5\5\3\0\3\5\1\0\4\5\11\0" +
        "\1\5\17\0\11\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0" +
        "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\4\0\7\5\1\0" +
        "\3\5\1\0\4\5\7\0\2\5\11\0\2\4\4\0\12\5\22\0" +
        "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0" +
        "\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0" +
        "\2\5\7\0\1\4\1\0\2\4\4\0\12\5\22\0\2\5\1\0" +
        "\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0\6\5\2\0" +
        "\3\5\1\0\4\5\11\0\1\5\10\0\2\4\4\0\12\5\22\0" +
        "\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0" +
        "\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0" +
        "\2\5\15\0\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0" +
        "\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0" +
        "\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0" +
        "\1\4\2\0\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5" +
        "\1\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0" +
        "\2\4\42\0\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0" +
        "\1\5\1\0\1\5\4\0\2\5\10\4\1\0\42\4\6\0\24\5" +
        "\1\0\2\5\4\4\4\0\10\5\1\0\44\5\11\0\1\5\71\0" +
        "\42\4\1\0\5\4\1\0\2\4\1\0\7\5\3\0\4\5\6\0" +
        "\12\5\6\0\6\4\4\5\106\0\46\4\12\0\51\4\7\0\132\4" +
        "\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4" +
        "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4" +
        "\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4" +
        "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4" +
        "\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4" +
        "\1\0\47\4\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4" +
        "\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4" +
        "\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0" +
        "\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4" +
        "\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0" +
        "\130\4\10\0\51\4\1\5\126\0\35\4\3\0\14\5\4\0\14\5" +
        "\12\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0" +
        "\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0" +
        "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0" +
        "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0" +
        "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\17\0" +
        "\4\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0\4\5\6\0" +
        "\6\5\1\0\1\4\15\0\1\4\40\0\22\4\36\0\15\5\4\0" +
        "\1\5\3\0\6\5\27\0\1\4\4\0\1\4\2\0\12\4\1\0" +
        "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0" +
        "\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4\26\0" +
        "\44\4\u0e81\0\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4" +
        "\4\0\126\4\2\0\2\5\2\0\3\4\1\0\137\4\5\0\50\4" +
        "\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4" +
        "\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4" +
        "\14\0\5\4\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4" +
        "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4" +
        "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\5\20\0\4\5" +
        "\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4" +
        "\2\0\1\5\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4" +
        "\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4" +
        "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
        "\2\0\2\1\1\2\1\3\1\0\1\4\2\2\1\5" +
        "\10\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14" +
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\0\1\23" +
        "\1\24\1\25\1\26\1\27\1\30\2\31\1\0\1\32" +
        "\1\3\1\0\6\2\1\33\3\2\1\34\5\2\1\35" +
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45" +
        "\1\46\1\47\1\50\1\51\1\3\1\0\3\2\1\52" +
        "\1\53\1\2\1\54\1\2\1\55\1\56\1\2\1\57" +
        "\1\2\1\60\1\61\1\62\4\2\1\63\1\64\2\2" +
        "\1\65\1\66\4\2\1\67\1\70\1\71";

    private static int[] zzUnpackAction() {
        int[] result = new int[109];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
        "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\231" +
        "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca" +
        "\0\u02fd\0\u0330\0\u0363\0\314\0\231\0\231\0\231\0\231" +
        "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\u0396" +
        "\0\u03c9\0\u03fc\0\u042f\0\231\0\231\0\231\0\u0462\0\u0495" +
        "\0\231\0\u04c8\0\231\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7" +
        "\0\u05fa\0\u062d\0\u0660\0\314\0\u0693\0\u06c6\0\u06f9\0\314" +
        "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\231\0\231\0\231" +
        "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231" +
        "\0\231\0\231\0\u082b\0\u082b\0\u085e\0\u0891\0\u08c4\0\314" +
        "\0\314\0\u08f7\0\314\0\u092a\0\314\0\314\0\u095d\0\314" +
        "\0\u0990\0\314\0\314\0\314\0\u09c3\0\u09f6\0\u0a29\0\u0a5c" +
        "\0\u0a8f\0\314\0\u0ac2\0\u0af5\0\314\0\314\0\u0b28\0\u0b5b" +
        "\0\u0b8e\0\u0bc1\0\314\0\314\0\314";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[109];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }


    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
        "\1\0\1\3\2\4\1\5\2\0\1\6\1\7\1\5" +
        "\1\10\1\11\1\12\1\5\1\13\1\14\1\15\1\16" +
        "\1\17\1\20\1\5\1\21\1\22\4\5\2\6\1\23" +
        "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\32" +
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
        "\1\43\1\44\1\45\1\46\1\0\1\47\1\50\1\51" +
        "\3\47\1\52\52\47\1\53\1\47\2\0\1\4\147\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\25\5\32\0" +
        "\1\6\1\54\1\55\4\0\1\55\14\0\2\6\35\0" +
        "\1\54\23\0\2\54\32\0\2\5\1\0\1\5\1\0" +
        "\1\5\1\0\1\5\1\56\23\5\27\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\5\5\1\57\17\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\15\5\1\60" +
        "\7\5\27\0\2\5\1\0\1\5\1\0\1\5\1\0" +
        "\4\5\1\61\1\62\17\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\16\5\1\63\6\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\12\5\1\64\1\5" +
        "\1\65\10\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\2\5\1\66\6\5\1\67\13\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\11\5\1\70\13\5" +
        "\27\0\2\5\1\0\1\5\1\0\1\5\1\0\14\5" +
        "\1\71\10\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\14\5\1\72\10\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\3\5\1\73\1\5\1\74\3\5" +
        "\1\75\13\5\77\0\1\76\62\0\1\77\62\0\1\100" +
        "\62\0\1\101\6\0\1\47\2\0\3\47\1\0\52\47" +
        "\1\0\1\47\2\0\1\51\60\0\2\102\1\0\3\102" +
        "\1\103\4\102\1\104\1\105\2\102\1\106\5\102\1\107" +
        "\3\102\1\110\27\102\1\111\1\112\7\0\1\54\1\0" +
        "\1\55\4\0\1\55\14\0\2\54\35\0\1\113\2\0" +
        "\1\114\20\0\2\113\10\0\1\114\21\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\2\5\1\115\22\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\23\5\1\116" +
        "\1\5\27\0\2\5\1\0\1\5\1\0\1\5\1\0" +
        "\1\117\7\5\1\120\14\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\1\121\24\5\27\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\6\5\1\122\16\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\7\5\1\123" +
        "\15\5\27\0\2\5\1\0\1\5\1\0\1\5\1\0" +
        "\17\5\1\124\5\5\27\0\2\5\1\0\1\5\1\0" +
        "\1\5\1\0\22\5\1\125\2\5\27\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\12\5\1\126\12\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\1\5\1\127" +
        "\23\5\27\0\2\5\1\0\1\5\1\0\1\5\1\0" +
        "\7\5\1\130\15\5\27\0\2\5\1\0\1\5\1\0" +
        "\1\5\1\0\5\5\1\131\17\5\27\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\15\5\1\132\7\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\12\5\1\133" +
        "\12\5\32\0\1\113\23\0\2\113\32\0\2\5\1\0" +
        "\1\5\1\0\1\5\1\0\3\5\1\134\21\5\27\0" +
        "\2\5\1\0\1\5\1\0\1\5\1\0\24\5\1\135" +
        "\27\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5" +
        "\1\136\23\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\7\5\1\137\15\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\20\5\1\140\4\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\22\5\1\141\2\5" +
        "\27\0\2\5\1\0\1\5\1\0\1\5\1\0\12\5" +
        "\1\142\12\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\14\5\1\143\10\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\3\5\1\144\21\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\3\5\1\145\21\5" +
        "\27\0\2\5\1\0\1\5\1\0\1\5\1\0\21\5" +
        "\1\146\3\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\1\5\1\147\23\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\1\5\1\150\23\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\22\5\1\151\2\5" +
        "\27\0\2\5\1\0\1\5\1\0\1\5\1\0\22\5" +
        "\1\152\2\5\27\0\2\5\1\0\1\5\1\0\1\5" +
        "\1\0\22\5\1\153\2\5\27\0\2\5\1\0\1\5" +
        "\1\0\1\5\1\0\3\5\1\154\21\5\27\0\2\5" +
        "\1\0\1\5\1\0\1\5\1\0\7\5\1\155\15\5" +
        "\23\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[3060];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
                                                 "Unkown internal scanner error",
                                                 "Error: could not match input",
                                                 "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
        "\2\0\1\1\1\11\2\1\1\0\1\11\14\1\13\11" +
        "\1\1\1\0\2\1\3\11\2\1\1\11\1\0\1\11" +
        "\1\1\1\0\20\1\15\11\1\1\1\0\41\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[109];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }


    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
        the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
        from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    StringBuffer string = new StringBuffer();

    public ExpressionScanner(String s) {
        this(new java.io.StringReader(s));
    }


    private Symbol symbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }


    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }


    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    ExpressionScanner(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    ExpressionScanner(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string  */
        int j = 0; /* index in unpacked array */
        while (i < 1758) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                             zzBuffer, 0,
                             zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzPushbackPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                                    zzBuffer.length - zzEndRead);

        if (numRead < 0) {
            return true;
        } else {
            zzEndRead += numRead;
            return false;
        }
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 43: {
                    return symbol(ExpressionParserSymbols.FFT);
                }
                case 58:
                    break;
                case 1: {
                /* ignore */
                }
                case 59:
                    break;
                case 49: {
                    return symbol(ExpressionParserSymbols.MIN);
                }
                case 60:
                    break;
                case 19: {
                    return symbol(ExpressionParserSymbols.GREATER);
                }
                case 61:
                    break;
                case 37: {
                    string.append('\f');
                }
                case 62:
                    break;
                case 9: {
                    return symbol(ExpressionParserSymbols.LBRACK);
                }
                case 63:
                    break;
                case 27: {
                    return symbol(ExpressionParserSymbols.LN);
                }
                case 64:
                    break;
                case 18: {
                    return symbol(ExpressionParserSymbols.LESS);
                }
                case 65:
                    break;
                case 11: {
                    return symbol(ExpressionParserSymbols.COMMA);
                }
                case 66:
                    break;
                case 50: {
                    return symbol(ExpressionParserSymbols.TRUE);
                }
                case 67:
                    break;
                case 53: {
                    return symbol(ExpressionParserSymbols.FALSE);
                }
                case 68:
                    break;
                case 42: {
                    return symbol(ExpressionParserSymbols.EXP);
                }
                case 69:
                    break;
                case 2: {
                    return symbol(ExpressionParserSymbols.IDENTIFIER, yytext());
                }
                case 70:
                    break;
                case 7: {
                    return symbol(ExpressionParserSymbols.LPAREN);
                }
                case 71:
                    break;
                case 39: {
                    string.append('\b');
                }
                case 72:
                    break;
                case 31: {
                    return symbol(ExpressionParserSymbols.GREATER_EQUAL);
                }
                case 73:
                    break;
                case 13: {
                    return symbol(ExpressionParserSymbols.MUL);
                }
                case 74:
                    break;
                case 35: {
                    string.append('\t');
                }
                case 75:
                    break;
                case 54: {
                    return symbol(ExpressionParserSymbols.LOG10);
                }
                case 76:
                    break;
                case 41: {
                    string.append('\'');
                }
                case 77:
                    break;
                case 28: {
                    return symbol(ExpressionParserSymbols.PI);
                }
                case 78:
                    break;
                case 56: {
                    return symbol(ExpressionParserSymbols.EXTREME);
                }
                case 79:
                    break;
                case 32: {
                    return symbol(ExpressionParserSymbols.NOT_EQUAL);
                }
                case 80:
                    break;
                case 46: {
                    return symbol(ExpressionParserSymbols.SIN);
                }
                case 81:
                    break;
                case 25: {
                    throw new RuntimeException("Unterminated string at end of line");
                }
                case 82:
                    break;
                case 26: {
                    yybegin(YYINITIAL);
                    return symbol(ExpressionParserSymbols.STRING, string.toString());
                }
                case 83:
                    break;
                case 12: {
                    return symbol(ExpressionParserSymbols.ADD);
                }
                case 84:
                    break;
                case 5: {
                    return symbol(ExpressionParserSymbols.E);
                }
                case 85:
                    break;
                case 55: {
                    return symbol(ExpressionParserSymbols.RAD_NORM);
                }
                case 86:
                    break;
                case 45: {
                    return symbol(ExpressionParserSymbols.SUM);
                }
                case 87:
                    break;
                case 29: {
                    return symbol(ExpressionParserSymbols.LESS_EQUAL);
                }
                case 88:
                    break;
                case 20: {
                    return symbol(ExpressionParserSymbols.NOT);
                }
                case 89:
                    break;
                case 21: {
                    return symbol(ExpressionParserSymbols.AND);
                }
                case 90:
                    break;
                case 6: {
                    return symbol(ExpressionParserSymbols.D);
                }
                case 91:
                    break;
                case 10: {
                    return symbol(ExpressionParserSymbols.RBRACK);
                }
                case 92:
                    break;
                case 14: {
                    return symbol(ExpressionParserSymbols.DIV);
                }
                case 93:
                    break;
                case 3: {
                    return symbol(ExpressionParserSymbols.NUMBER, new Double(yytext()));
                }
                case 94:
                    break;
                case 48: {
                    return symbol(ExpressionParserSymbols.MAX);
                }
                case 95:
                    break;
                case 8: {
                    return symbol(ExpressionParserSymbols.RPAREN);
                }
                case 96:
                    break;
                case 15: {
                    return symbol(ExpressionParserSymbols.POW);
                }
                case 97:
                    break;
                case 47: {
                    return symbol(ExpressionParserSymbols.COS);
                }
                case 98:
                    break;
                case 16: {
                    return symbol(ExpressionParserSymbols.MOD);
                }
                case 99:
                    break;
                case 51: {
                    return symbol(ExpressionParserSymbols.NORM);
                }
                case 100:
                    break;
                case 40: {
                    string.append('\"');
                }
                case 101:
                    break;
                case 4: {
                    return symbol(ExpressionParserSymbols.SUB);
                }
                case 102:
                    break;
                case 57: {
                    return symbol(ExpressionParserSymbols.NORMRMS);
                }
                case 103:
                    break;
                case 30: {
                    return symbol(ExpressionParserSymbols.EQUAL);
                }
                case 104:
                    break;
                case 36: {
                    string.append('\r');
                }
                case 105:
                    break;
                case 52: {
                    return symbol(ExpressionParserSymbols.MEAN);
                }
                case 106:
                    break;
                case 23: {
                    yybegin(STRING);
                    string.setLength(0);
                }
                case 107:
                    break;
                case 34: {
                    string.append('\\');
                }
                case 108:
                    break;
                case 17: {
                    return symbol(ExpressionParserSymbols.JOIN);
                }
                case 109:
                    break;
                case 22: {
                    return symbol(ExpressionParserSymbols.OR);
                }
                case 110:
                    break;
                case 44: {
                    return symbol(ExpressionParserSymbols.ABS);
                }
                case 111:
                    break;
                case 38: {
                    string.append('\n');
                }
                case 112:
                    break;
                case 24: {
                    string.append(yytext());
                }
                case 113:
                    break;
                case 33: {
                    throw new RuntimeException("Illegal escape sequence \"" + yytext() +
                                               "\"");
                }
                case 114:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        {
                            return symbol(ExpressionParserSymbols.EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
